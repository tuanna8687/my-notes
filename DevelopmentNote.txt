
1. PDB File
	- This file is very important when you want to debug a assembly. You must have this file along with the EXE/DLL to be able to debug.
	- 2 executables could have same source code but different pdb
	- https://www.wintellect.com/pdb-files-what-every-developer-must-know/
	
2. User code vs non-user code
	- It impacts to "Enable Just My Code" option in VS
	- To distinguish user code from non-user code, Just My Code looks at symbol (.pdb) files and program optimizations. The debugger considers code to be non-user code when the binary is optimized or when the .pdb file is not available.
	- https://msdn.microsoft.com/en-us/library/dn457346.aspx
	- https://blogs.msdn.microsoft.com/zainnab/2010/10/25/understanding-just-my-code/
	- For example:
		+ I write my web application that uses a nuget package named PackageA
		+ If I have source code of the PackageA and I compile the source code with Debug mode (code is not optimized and PDB is generated)
		+ Now I can debug the PackageA without uncheck "Enable Just My Code". Because debugger considers PackageA as user code
		+ But if I compile the source code PackageA with Release mode (code is optimized and PDB is generated)
		+ I only debug the PackageA when uncheck "Enable Just My Code". Because debugger considers PackageA as non-user code

3. You can debug a release version of a DLL (with PDB file) but it does not smoothly: https://stackoverflow.com/questions/769995/debugging-a-release-version-of-a-dll-with-pdb-file

4. To debug a assembly (EXE/DLL) we must have:
	- EXE/DLL file
	- PDB file (can generated by tool as dotPeek as well as download from symbols server)
	- Source code (can generated by tool as reshaper, etc.)
	
5. Debug ASP.NET Core source code: https://www.stevejgordon.co.uk/debugging-asp-net-core-2-source

6. Debug a ASP.NET Core module for example: Microsoft.AspNetCore.Authentication.dll
	- Find source code of the DLL on github (or generated from tools such as Reshaper). The source code of the same version as DLL
	- Compile the source code with "Debug" mode to generate a new DLL along with PDB file
	- Copy the new DLL & PDB file into the folder of app or process you want to attach to debug
	- Open source code of the DLL in VS and attach the process to debug
	- Must make sure that the symbol for the DLL is loaded --> using Modules window in VS Debugger
	
7. Specify Symbol (.pdb) and Source Files in the Visual Studio Debugger (https://msdn.microsoft.com/en-us/library/ms241613.aspx)
	- Where the debugger searches for .pdb files
		+ The location that is specified inside the DLL or the executable file. (By default, if you have built a DLL or an executable file on your computer, the linker places the full path and file name of the associated .pdb file inside the DLL or the executable file. The debugger first checks to see if the symbol file exists in the location that is specified inside the DLL or the executable file. This is helpful, because you always have symbols available for code that you have compiled on your computer.)
		+ .pdb files that could be present in the same folder as the DLL or executable file.
		+ Any local symbol cache folders.
		+ Any network, internet, or local symbol servers and locations that are specified on, such as the Microsoft symbol server if enabled.
	- Where the debugger searches for source files
		+ Files that are open in the IDE of the Visual Studio instance that launched the debugger.
		+ Files in the solution that is open in the Visual Studio instance.
		+ Directories that are specified in the Common Properties / Debug Source Files page in the properties of the solution. (In the Solution Explorer, select the solution node, right-click, and select Properties. )
		+ The source information of the .pdb of the module. This can be the location of the source file when the module was built, or it can be a command to a source server.